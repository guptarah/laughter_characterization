function [InitialParameters] = InitializePoissonRateFunctionParameters(FunctionType,NumberOfChangePoints,LambdaHomogeneous,Options)
% initialize poisson rate parameters according to the type of function used
% [InitialParameters] = InitializePoissonRateFunctionParameters(FunctionType,NumberOfChangePoints,LambdaHomogeneous)
% FunctionType          : type of summing functions (exponential,chi-square,Tukey windows)
% NumberOfChangePoints  : number of change points
% LambdaHomogeneous     : lambda of homogeneous function
% InitialParameters     : resulting initial parameters

if strcmpi(FunctionType,'expsum')
%	InitialParameters=[LambdaHomogeneous ones(1,NumberOfChangePoints) 0.1*ones(1,NumberOfChangePoints);...
%                       -0.5*ones(1,NumberOfChangePoints+1) 0.01*ones(1,NumberOfChangePoints);...
%                       ones(1,NumberOfChangePoints+1) 2*ones(1,NumberOfChangePoints)];
	InitialParameters=[LambdaHomogeneous 1 .1];

elseif strcmpi(FunctionType,'chisum')
    InitialParameters=[LambdaHomogeneous ones(1,NumberOfChangePoints) -0.1*ones(1,NumberOfChangePoints) 0.01*ones(1,NumberOfChangePoints) 10*ones(1,NumberOfChangePoints);...
                       0 -0.3*ones(1,NumberOfChangePoints) 0.05*ones(1,NumberOfChangePoints) 7*ones(1,NumberOfChangePoints);...
                       3 0.3*ones(1,NumberOfChangePoints) ones(1,NumberOfChangePoints) 10*ones(1,NumberOfChangePoints)];
elseif strcmpi(FunctionType,'tukeywinsum')
%    if Options==1
%        InitialParameters=[LambdaHomogeneous ones(1,NumberOfChangePoints) 10*ones(1,NumberOfChangePoints);...
%                       zeros(1,NumberOfChangePoints+1) ones(1,NumberOfChangePoints);...
%                       ones(1,NumberOfChangePoints+1) 60*ones(1,NumberOfChangePoints)];
	
%    elseif Options==2
%        InitialParameters=[LambdaHomogeneous -0.1*ones(1,NumberOfChangePoints) 10*ones(1,NumberOfChangePoints);...
%                       -0.5*ones(1,NumberOfChangePoints+1) ones(1,NumberOfChangePoints);...
%                       ones(1,NumberOfChangePoints+1) 60*ones(1,NumberOfChangePoints)];
%    end
	InitialParameters=[LambdaHomogeneous 1 10];
elseif strcmpi(FunctionType,'rectwinsum')
%    if Options==1
%        InitialParameters=[LambdaHomogeneous ones(1,NumberOfChangePoints) 10*ones(1,NumberOfChangePoints);...
%                       zeros(1,NumberOfChangePoints+1) ones(1,NumberOfChangePoints);...
%                       ones(1,NumberOfChangePoints+1) 60*ones(1,NumberOfChangePoints)];
%    elseif Options==2
%        InitialParameters=[LambdaHomogeneous -0.1*ones(1,NumberOfChangePoints) 10*ones(1,NumberOfChangePoints);...
%                       -0.5*ones(1,NumberOfChangePoints+1) ones(1,NumberOfChangePoints);...
%                       ones(1,NumberOfChangePoints+1) 60*ones(1,NumberOfChangePoints)];
%    end
	InitialParameters=[LambdaHomogeneous 1 3];

elseif strcmpi(FunctionType,'selfmutual') || strcmpi(FunctionType,'mutualweighted')
%     InitialParameters=[LambdaHomogeneous ones(1,NumberOfChangePoints) 0.1*ones(1,NumberOfChangePoints);...
%                        -0.3*ones(1,NumberOfChangePoints+1) 0.01*ones(1,NumberOfChangePoints);...
%                        ones(1,NumberOfChangePoints+1) 2*ones(1,NumberOfChangePoints)];
    InitialParameters=[LambdaHomogeneous ones(1,NumberOfChangePoints) 0.1*ones(1,NumberOfChangePoints);...
                       -0.3*ones(1,NumberOfChangePoints+1) zeros(1,NumberOfChangePoints);...
                       Inf*ones(1,NumberOfChangePoints+1) Inf*ones(1,NumberOfChangePoints)];
end
